import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Avatar, AvatarFallback } from './ui/avatar';
import { Badge } from './ui/badge';
import { ScrollArea, ScrollBar } from './ui/scroll-area';
import { Separator } from './ui/separator';
import { 
  Send, 
  Bot, 
  User, 
  Mic, 
  Wifi,
  Sparkles,
  Heart,
  Shield,
  Activity,
  Clock,
  Star,
  ChevronDown,
  RotateCcw,
  Phone,
  MapPin,
  FileText,
  MessageSquare,
  Zap,
  Volume2,
  Copy,
  ThumbsUp,
  ThumbsDown,
  Globe
} from 'lucide-react';

interface ChatBotProps {
  language: string;
  isOnline?: boolean;
}

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  suggestions?: string[];
  type?: 'text' | 'health-tip' | 'emergency';
}

export function ChatBot({ language, isOnline = true }: ChatBotProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: getWelcomeMessage(language),
      sender: 'bot',
      timestamp: new Date(),
      suggestions: getKeralaDiseasePrompts(language).slice(0, 3),
      type: 'text'
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showPrompts, setShowPrompts] = useState(true);
  const [activeCategory, setActiveCategory] = useState('diseases');
  const [isListening, setIsListening] = useState(false);
  const [showQuickActions, setShowQuickActions] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  function getWelcomeMessage(lang: string): string {
    const messages = {
      en: "ЁЯСЛ Welcome to Kerala AI Health Assistant! I'm here to help migrant workers with health guidance, disease prevention, and local medical information. What can I help you with today?",
      ml: "ЁЯСЛ р┤Хр╡Зр┤░р┤│ AI р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В! р┤Хр╡Бр┤Яр┤┐р┤пр╡Зр┤▒р╡Нр┤▒ р┤др╡Кр┤┤р┤┐р┤▓р┤╛р┤│р┤┐р┤Хр╡╛р┤Хр╡Нр┤Хр╡Н р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В, р┤░р╡Лр┤Ч р┤кр╡Нр┤░р┤др┤┐р┤░р╡Лр┤зр┤В, р┤кр╡Нр┤░р┤╛р┤жр╡Зр┤╢р┤┐р┤Х р┤╡р╡Ир┤жр╡Нр┤п р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр┤┐р╡╜ р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Юр┤╛р╡╗ р┤Зр┤╡р┤┐р┤Яр╡Жр┤пр╡Бр┤гр╡Нр┤Яр╡Н. р┤Зр┤ир╡Нр┤ир╡Н р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р┤В?",
      hi: "ЁЯСЛ рдХреЗрд░рд▓ AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдкреНрд░рд╡рд╛рд╕реА рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди, рд░реЛрдЧ рдмрдЪрд╛рд╡ рдФрд░ рд╕реНрдерд╛рдиреАрдп рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЬрд╛рдирдХрд╛рд░реА рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
      ta: "ЁЯСЛ роХрпЗро░ро│ AI роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпБроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! рокрпБро▓роорпНрокрпЖропро░рпНроирпНрод родрпКро┤ро┐ро▓ро╛ро│ро░рпНроХро│рпБроХрпНроХрпБ роЪрпБроХро╛родро╛ро░ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН, роирпЛропрпН родроЯрпБрокрпНрокрпБ рооро▒рпНро▒рпБроорпН роЙро│рпНро│рпВро░рпН рооро░рпБродрпНродрпБро╡ родроХро╡ро▓рпНроХро│ро┐ро▓рпН роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?"
    };
    return messages[lang as keyof typeof messages] || messages.en;
  }

  function getKeralaDiseasePrompts(lang: string): string[] {
    const prompts = {
      en: [
        'Dengue fever prevention & symptoms',
        'Chikungunya complete guide',
        'Leptospirosis monsoon safety',
        'Malaria protection methods',
        'Food safety for workers',
        'Water purification tips',
        'Emergency health contacts',
        'Nearest medical facilities'
      ],
      ml: [
        'р┤бр╡Жр┤Щр╡Нр┤Хр╡Б р┤кр┤ир┤┐ р┤кр╡Нр┤░р┤др┤┐р┤░р╡Лр┤зр┤╡р╡Бр┤В р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр┤│р╡Бр┤В',
        'р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр╡╗р┤Чр╡Бр┤ир╡Нр┤п р┤кр╡Вр╡╝р┤гр╡Нр┤г р┤Чр╡Ир┤бр╡Н',
        'р┤▓р╡Жр┤кр╡Нр┤▒р╡Нр┤▒р╡Лр┤╕р╡Нр┤кр╡Ир┤▒р╡Лр┤╕р┤┐р┤╕р╡Н р┤ор╡║р┤╕р╡Вр╡║ р┤╕р╡Бр┤░р┤Хр╡Нр┤╖',
        'р┤ор┤▓р╡Зр┤▒р┤┐р┤п р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤г р┤░р╡Ар┤др┤┐р┤Хр╡╛',
        'р┤др╡Кр┤┤р┤┐р┤▓р┤╛р┤│р┤┐р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ р┤нр┤Хр╡Нр┤╖р┤г р┤╕р╡Бр┤░р┤Хр╡Нр┤╖',
        'р┤Ьр┤▓ р┤╢р╡Бр┤жр╡Нр┤зр╡Ар┤Хр┤░р┤г р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛',
        'р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤░ р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤Хр╡Лр╡║р┤Яр┤╛р┤Хр╡Нр┤▒р╡Нр┤▒р╡Бр┤Хр╡╛',
        'р┤Ер┤Яр╡Бр┤др╡Нр┤др╡Бр┤│р╡Нр┤│ р┤╡р╡Ир┤жр╡Нр┤пр┤╕р╡Чр┤Хр┤░р╡Нр┤пр┤Щр╡Нр┤Щр╡╛'
      ],
      hi: [
        'рдбреЗрдВрдЧреВ рдмреБрдЦрд╛рд░ рдмрдЪрд╛рд╡ рдФрд░ рд▓рдХреНрд╖рдг',
        'рдЪрд┐рдХрдирдЧреБрдирд┐рдпрд╛ рдкреВрд░реНрдг рдЧрд╛рдЗрдб',
        'рд▓реЗрдкреНрдЯреЛрд╕реНрдкрд╛рдЗрд░реЛрд╕рд┐рд╕ рдорд╛рдирд╕реВрди рд╕реБрд░рдХреНрд╖рд╛',
        'рдорд▓реЗрд░рд┐рдпрд╛ рд╕рдВрд░рдХреНрд╖рдг рддрд░реАрдХреЗ',
        'рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рдЦрд╛рджреНрдп рд╕реБрд░рдХреНрд╖рд╛',
        'рдкрд╛рдиреА рд╢реБрджреНрдзреАрдХрд░рдг рд╕реБрдЭрд╛рд╡',
        'рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдкрд░реНрдХ',
        'рдирд┐рдХрдЯрддрдо рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕реБрд╡рд┐рдзрд╛рдПрдВ'
      ],
      ta: [
        'роЯрпЖроЩрпНроХрпБ роХро╛ропрпНроЪрпНроЪро▓рпН родроЯрпБрокрпНрокрпБ & роЕро▒ро┐роХрпБро▒ро┐роХро│рпН',
        'роЪро┐роХрпНроХрпБройрпНроХрпБройро┐ропро╛ роорпБро┤рпБроорпИропро╛рой ро╡ро┤ро┐роХро╛роЯрпНроЯро┐',
        'ро▓рпЖрокрпНроЯрпЛро╕рпНрокрпИро░рпЛроЪро┐ро╕рпН рокро░рпБро╡рооро┤рпИ рокро╛родрпБроХро╛рокрпНрокрпБ',
        'рооро▓рпЗро░ро┐ропро╛ рокро╛родрпБроХро╛рокрпНрокрпБ роорпБро▒рпИроХро│рпН',
        'родрпКро┤ро┐ро▓ро╛ро│ро░рпНроХро│рпБроХрпНроХро╛рой роЙрогро╡рпБ рокро╛родрпБроХро╛рокрпНрокрпБ',
        'роирпАро░рпН роЪрпБродрпНродро┐роХро░ро┐рокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН',
        'роЕро╡роЪро░ роЪрпБроХро╛родро╛ро░ родрпКроЯро░рпНрокрпБроХро│рпН',
        'роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡ ро╡роЪродро┐роХро│рпН'
      ]
    };
    return prompts[lang as keyof typeof prompts] || prompts.en;
  }

  function getHealthTips(lang: string): string[] {
    const tips = {
      en: [
        'ЁЯТз Drink 3+ liters of water daily in Kerala heat',
        'ЁЯз╝ Wash hands frequently, especially before meals',
        'ЁЯжЯ Use mosquito nets - peak disease season ongoing',
        'ЁЯНО Eat fresh, hot food - avoid roadside vendors initially',
        'ЁЯТК Keep basic medicines: ORS, paracetamol, antiseptic',
        'ЁЯУ▒ Save emergency numbers: 108 (ambulance), 112 (emergency)',
        'ЁЯПе Register at nearest primary health center',
        'ЁЯМбя╕П Monitor temperature - seek help if fever persists'
      ],
      ml: [
        'ЁЯТз р┤Хр╡Зр┤░р┤│р┤др╡Нр┤др┤┐р┤▓р╡Ж р┤Ър╡Вр┤Яр┤┐р╡╜ р┤жр┤┐р┤╡р┤╕р┤В 3+ р┤▓р┤┐р┤▒р╡Нр┤▒р╡╝ р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤Хр╡Бр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х',
        'ЁЯз╝ р┤Хр╡Ир┤Хр╡╛ р┤Зр┤Яр┤пр╡Нр┤Хр╡Нр┤Хр┤┐р┤Яр╡Ж р┤Хр┤┤р╡Бр┤Хр╡Бр┤Х, р┤кр╡Нр┤░р┤др╡Нр┤пр╡Зр┤Хр┤┐р┤Ър╡Нр┤Ър╡Н р┤нр┤Хр╡Нр┤╖р┤гр┤др╡Нр┤др┤┐р┤ир╡Б р┤ор╡Бр┤ор╡Нр┤кр╡Н',
        'ЁЯжЯ р┤Хр╡Кр┤др╡Бр┤Хр╡Н р┤╡р┤▓ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х - р┤░р╡Лр┤Ч р┤╕р╡Ар┤╕р╡║ р┤др╡Бр┤Яр┤░р╡Бр┤ир╡Нр┤ир╡Б',
        'ЁЯНО р┤кр╡Бр┤др┤┐р┤п, р┤Ър╡Вр┤Яр╡Бр┤│р╡Нр┤│ р┤нр┤Хр╡Нр┤╖р┤гр┤В р┤Хр┤┤р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х - р┤др╡Бр┤Яр┤Хр╡Нр┤Хр┤др╡Нр┤др┤┐р╡╜ р┤▒р╡Лр┤бр╡Нр┤╕р╡Ир┤бр╡Н р┤╡р╡Жр┤гр╡Нр┤Яр╡╝р┤ор┤╛р┤░р╡Ж р┤Тр┤┤р┤┐р┤╡р┤╛р┤Хр╡Нр┤Хр╡Бр┤Х',
        'ЁЯТК р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤и р┤ор┤░р╡Бр┤ир╡Нр┤ир╡Бр┤Хр╡╛ р┤Хр┤░р╡Бр┤др╡Бр┤Х: ORS, р┤кр┤╛р┤░р┤╕р╡Жр┤▒р╡Нр┤▒р┤ор╡Лр╡╛, р┤Жр┤ир╡Нр┤▒р┤┐р┤╕р╡Жр┤кр╡Нр┤▒р╡Нр┤▒р┤┐р┤Хр╡Н',
        'ЁЯУ▒ р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤░ р┤ир┤ор╡Нр┤кр┤▒р╡Бр┤Хр╡╛ р┤╕р╡Зр┤╡р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х: 108 (р┤Жр┤Вр┤мр╡Бр┤▓р╡╗р┤╕р╡Н), 112 (р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤░)',
        'ЁЯПе р┤Ер┤Яр╡Бр┤др╡Нр┤др╡Бр┤│р╡Нр┤│ р┤кр╡Нр┤░р┤╛р┤ер┤ор┤┐р┤Х р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤Хр╡Зр┤ир╡Нр┤жр╡Нр┤░р┤др╡Нр┤др┤┐р╡╜ р┤░р┤Ьр┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡╝ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х',
        'ЁЯМбя╕П р┤др┤╛р┤кр┤ир┤┐р┤▓ р┤ир┤┐р┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х - р┤кр┤ир┤┐ р┤др╡Бр┤Яр╡╝р┤ир╡Нр┤ир┤╛р╡╜ р┤╕р┤╣р┤╛р┤пр┤В р┤др╡Зр┤Яр╡Бр┤Х'
      ],
      hi: [
        'ЁЯТз рдХреЗрд░рд▓ рдХреА рдЧрд░реНрдореА рдореЗрдВ рджрд┐рди рдореЗрдВ 3+ рд▓реАрдЯрд░ рдкрд╛рдиреА рдкрд┐рдПрдВ',
        'ЁЯз╝ рдмрд╛рд░-рдмрд╛рд░ рд╣рд╛рде рдзреЛрдПрдВ, рдЦрд╛рд╕рдХрд░ рдЦрд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ',
        'ЁЯжЯ рдордЪреНрдЫрд░рджрд╛рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ - рдмреАрдорд╛рд░реА рдХрд╛ рдореМрд╕рдо рдЬрд╛рд░реА',
        'ЁЯНО рддрд╛рдЬрд╛, рдЧрд░реНрдо рдЦрд╛рдирд╛ рдЦрд╛рдПрдВ - рд╢реБрд░реВ рдореЗрдВ рд░реЛрдбрд╕рд╛рдЗрдб рд╡реЗрдВрдбрд░ рд╕реЗ рдмрдЪреЗрдВ',
        'ЁЯТК рдмреБрдирд┐рдпрд╛рджреА рджрд╡рд╛рдПрдВ рд░рдЦреЗрдВ: ORS, рдкреЗрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓, рдПрдВрдЯреАрд╕реЗрдкреНрдЯрд┐рдХ',
        'ЁЯУ▒ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдирдВрдмрд░ рд╕реЗрд╡ рдХрд░реЗрдВ: 108 (рдПрдореНрдмреБрд▓реЗрдВрд╕), 112 (рдЖрдкрд╛рддрдХрд╛рд▓)',
        'ЁЯПе рдирд┐рдХрдЯрддрдо рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░ рдореЗрдВ рдкрдВрдЬреАрдХрд░рдг рдХрд░рд╛рдПрдВ',
        'ЁЯМбя╕П рддрд╛рдкрдорд╛рди рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ - рдмреБрдЦрд╛рд░ рдмрдиреЗ рддреЛ рдорджрдж рд▓реЗрдВ'
      ],
      ta: [
        'ЁЯТз роХрпЗро░ро│ро╛ро╡ро┐ройрпН ро╡рпЖрокрпНрокродрпНродро┐ро▓рпН роиро╛ро│рпКройрпНро▒рпБроХрпНроХрпБ 3+ ро▓ро┐роЯрпНроЯро░рпН родрогрпНрогрпАро░рпН роХрпБроЯро┐роХрпНроХро╡рпБроорпН',
        'ЁЯз╝ роЕроЯро┐роХрпНроХроЯро┐ роХрпИ роХро┤рпБро╡ро╡рпБроорпН, роХрпБро▒ро┐рокрпНрокро╛роХ роЙрогро╡рпБроХрпНроХрпБ роорпБройрпН',
        'ЁЯжЯ роХрпКроЪрпБро╡ро▓рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН - роирпЛропрпН рокро░рпБро╡роорпН родрпКроЯро░рпНроХро┐ро▒родрпБ',
        'ЁЯНО рокрпБродро┐роп, роЪрпВроЯро╛рой роЙрогро╡рпБ роЪро╛рокрпНрокро┐роЯро╡рпБроорпН - роЖро░роорпНрокродрпНродро┐ро▓рпН роЪро╛ро▓рпИропрпЛро░ ро╡ро┐ро▒рпНрокройрпИропро╛ро│ро░рпНроХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН',
        'ЁЯТК роЕроЯро┐рокрпНрокроЯрпИ рооро░рпБроирпНродрпБроХро│рпН ро╡рпИродрпНродро┐ро░рпБроХрпНроХро╡рпБроорпН: ORS, рокро╛ро░ро╛роЪро┐роЯрпНроЯрооро╛ро▓рпН, роХро┐ро░рпБрооро┐ роиро╛роЪро┐ройро┐',
        'ЁЯУ▒ роЕро╡роЪро░ роОрогрпНроХро│рпИ роЪрпЗрооро┐роХрпНроХро╡рпБроорпН: 108 (роЖроорпНрокрпБро▓ройрпНро╕рпН), 112 (роЕро╡роЪро░роорпН)',
        'ЁЯПе роЕро░рпБроХро┐ро▓рпБро│рпНро│ роорпБродройрпНроорпИ роЪрпБроХро╛родро╛ро░ роорпИропродрпНродро┐ро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН',
        'ЁЯМбя╕П ро╡рпЖрокрпНрокроиро┐ро▓рпИропрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН - роХро╛ропрпНроЪрпНроЪро▓рпН родрпКроЯро░рпНроирпНродро╛ро▓рпН роЙродро╡ро┐ рокрпЖро▒ро╡рпБроорпН'
      ]
    };
    return tips[lang as keyof typeof tips] || tips.en;
  }

  function getBotResponse(userMessage: string, lang: string): string {
    const lowerMessage = userMessage.toLowerCase();
    
    const responses = {
      en: {
        dengue: "ЁЯжЯ **Dengue Fever - Complete Guide:**\n\n**ЁЯФ┤ Critical Symptoms:**\nтАв High fever (104┬░F+) for 2-7 days\nтАв Severe headache & eye pain\nтАв Muscle & joint aches\nтАв Nausea, vomiting\nтАв Skin rash (day 3-5)\n\n**тЪая╕П Danger Signs (Seek Emergency Care):**\nтАв Severe abdominal pain\nтАв Persistent vomiting\nтАв Bleeding (nose, gums)\nтАв Difficulty breathing\nтАв Cold, clammy skin\n\n**ЁЯЫбя╕П Prevention Protocol:**\nтАв Eliminate standing water (pots, containers)\nтАв Use mosquito nets (especially 6AM-6PM)\nтАв Wear long sleeves & pants\nтАв Apply DEET-based repellent\nтАв Clean water storage weekly\n\n**ЁЯТК Treatment:**\nтАв Paracetamol for fever (NOT aspirin)\nтАв Increase fluid intake\nтАв Rest in mosquito-free area\nтАв Monitor platelet count\n\n**ЁЯУЮ Emergency:** Call 108 if symptoms worsen",
        chikungunya: "ЁЯжЯ **Chikungunya - Worker's Guide:**\n\n**ЁЯФ┤ Key Symptoms:**\nтАв Sudden high fever (102-104┬░F)\nтАв Severe joint pain (hands, feet, knees)\nтАв Muscle pain & stiffness\nтАв Headache & fatigue\nтАв Skin rash\n\n**тЪб Distinguishing Features:**\nтАв Joint pain can last weeks/months\nтАв Morning stiffness is common\nтАв Affects small joints more\n\n**ЁЯЫбя╕П Prevention (Same as Dengue):**\nтАв Remove stagnant water sources\nтАв Use protective clothing\nтАв Apply mosquito repellent\nтАв Sleep under treated nets\n\n**ЁЯТК Management:**\nтАв Paracetamol for pain & fever\nтАв Gentle joint exercises\nтАв Warm compresses for stiffness\nтАв Stay hydrated\nтАв Avoid aspirin & ibuprofen\n\n**тП░ Recovery:** Most recover in 7-10 days, but joint pain may persist\n\n**ЁЯПе See doctor if:** Severe joint pain affects work ability",
        leptospirosis: "ЁЯМК **Leptospirosis - Monsoon Alert:**\n\n**тЪая╕П HIGH RISK in Kerala Monsoons!**\n\n**ЁЯФ┤ Early Symptoms (Days 1-7):**\nтАв High fever & chills\nтАв Severe headache\nтАв Muscle aches (calves, thighs)\nтАв Nausea, vomiting\nтАв Red eyes\nтАв Abdominal pain\n\n**ЁЯФ┤ Severe Phase (Week 2):**\nтАв Jaundice (yellow skin/eyes)\nтАв Kidney problems\nтАв Bleeding\nтАв Difficulty breathing\n\n**ЁЯЫбя╕П Critical Prevention:**\nтАв AVOID wading in flood water\nтАв Wear waterproof boots\nтАв Cover all cuts & wounds\nтАв Boil drinking water\nтАв Avoid swimming in contaminated water\n\n**ЁЯз╝ After Water Exposure:**\nтАв Wash thoroughly with soap\nтАв Disinfect any cuts\nтАв Change clothes immediately\nтАв Monitor for symptoms\n\n**ЁЯТК Treatment:**\nтАв Antibiotics (doxycycline/penicillin)\nтАв Must start early for effectiveness\nтАв Supportive care for complications\n\n**ЁЯЪи URGENT:** See doctor immediately if symptoms appear after water contact!",
        malaria: "ЁЯжЯ **Malaria Protection Guide:**\n\n**ЁЯФ┤ Symptoms:**\nтАв Fever with chills (cyclical pattern)\nтАв Intense sweating\nтАв Headache & fatigue\nтАв Nausea, vomiting\nтАв Muscle aches\n\n**тЪб Emergency Signs:**\nтАв High fever (105┬░F+)\nтАв Confusion, seizures\nтАв Difficulty breathing\nтАв Dark/bloody urine\n\n**ЁЯЫбя╕П Prevention Strategy:**\nтАв Use ITNs (Insecticide-Treated Nets)\nтАв Apply repellent (evening/night)\nтАв Wear long clothes after sunset\nтАв Use coils/vaporizers indoors\nтАв Remove breeding sites\n\n**ЁЯТК Treatment:**\nтАв Rapid diagnostic test required\nтАв Artemisinin-based therapy\nтАв Complete full course of medication\nтАв Follow-up blood tests\n\n**тП░ Timing:** Seek treatment within 24 hours of symptoms\n\n**ЁЯПе Where:** Any government hospital/PHC provides free treatment",
        foodsafety: "ЁЯН╜я╕П **Food Safety for Migrant Workers:**\n\n**тЬЕ Safe Eating Practices:**\nтАв Eat freshly cooked, steaming hot food\nтАв Choose busy restaurants (high turnover)\nтАв Avoid raw vegetables initially\nтАв Peel fruits yourself\nтАв Drink only boiled/bottled water\n\n**тЭМ Foods to Avoid Initially:**\nтАв Street vendor food\nтАв Raw salads & cut fruits\nтАв Ice in drinks\nтАв Dairy products (unrefrigerated)\nтАв Leftover food\nтАв Tap water\n\n**ЁЯПа At Accommodation:**\nтАв Store food in sealed containers\nтАв Refrigerate perishables immediately\nтАв Cook meat thoroughly\nтАв Use clean utensils\nтАв Keep cooking area clean\n\n**ЁЯжа Common Foodborne Illnesses:**\nтАв Traveler's diarrhea\nтАв Food poisoning\nтАв Typhoid fever\nтАв Hepatitis A\n\n**ЁЯТК First Aid:**\nтАв ORS for diarrhea\nтАв Plenty of fluids\nтАв Bland foods (rice, banana)\nтАв Avoid dairy temporarily\n\n**ЁЯПе See doctor if:** Severe symptoms, blood in stool, high fever",
        waterborne: "ЁЯТз **Water Safety & Purification:**\n\n**ЁЯФ┤ Common Water-borne Diseases:**\nтАв Cholera (severe diarrhea)\nтАв Typhoid fever\nтАв Hepatitis A & E\nтАв Dysentery\nтАв Giardiasis\n\n**тЬЕ Safe Water Sources:**\nтАв Boiled water (rolling boil for 1 min)\nтАв Bottled water (sealed brands)\nтАв Water purification tablets\nтАв UV sterilized water\n\n**ЁЯзк DIY Water Purification:**\nтАв Boiling: Most effective method\nтАв Chlorine tablets: Follow instructions\nтАв Solar disinfection: Clear bottles in sun\nтАв Filtration: Use clean cloth first\n\n**тЭМ Avoid:**\nтАв Tap water\nтАв Well water (unless tested)\nтАв Ice cubes\nтАв Fountain drinks\nтАв Swimming pool water\n\n**ЁЯЪ┐ Personal Hygiene:**\nтАв Use safe water for brushing teeth\nтАв Shower with soap\nтАв Wash hands frequently\nтАв Clean wounds with safe water\n\n**тЪая╕П Monsoon Special Alert:**\nтАв Water contamination increases\nтАв Be extra cautious\nтАв Boil even 'clean' looking water",
        emergency: "ЁЯЪи **Emergency Health Contacts:**\n\n**ЁЯУЮ Primary Numbers:**\nтАв Ambulance: 108 (Free, 24/7)\nтАв Emergency Response: 112\nтАв Police: 100\nтАв Fire Service: 101\nтАв Women Helpline: 1091\n\n**ЁЯПе Kerala Health Services:**\nтАв Health Department: 0471-2318250\nтАв Disease Control: 0471-2308470\nтАв Blood Bank: 0471-2443152\n\n**ЁЯУ▒ Mobile Apps:**\nтАв Arogyam: Kerala health app\nтАв 108 Ambulance app\nтАв ESANJEEVANI: Telemedicine\n\n**ЁЯЖШ When to Call 108:**\nтАв High fever (104┬░F+)\nтАв Difficulty breathing\nтАв Chest pain\nтАв Severe headache\nтАв Unconsciousness\nтАв Heavy bleeding\nтАв Severe abdominal pain\n\n**ЁЯУН Information to Provide:**\nтАв Exact location/landmarks\nтАв Nature of emergency\nтАв Number of patients\nтАв Your contact number\n\n**ЁЯТ│ Important:** All emergency services are FREE",
        clinic: "ЁЯПе **Finding Healthcare in Kerala:**\n\n**ЁЯОп Nearest Facilities:**\nтАв Primary Health Center (PHC): 800m\nтАв Community Health Center: 2.3km\nтАв District Hospital: 5.1km\nтАв Medical College: 12.4km\n\n**ЁЯУЛ What to Bring:**\nтАв Aadhaar card\nтАв Health ID (if available)\nтАв Previous medical records\nтАв Current medications\nтАв Emergency contact info\n\n**ЁЯТ░ Cost Information:**\nтАв PHC: Free consultation\nтАв Government hospitals: Minimal fees\nтАв Private clinics: тВ╣200-500\nтАв Emergency: Free at govt facilities\n\n**тП░ Operating Hours:**\nтАв PHC: 8 AM - 8 PM\nтАв Hospitals: 24/7 emergency\nтАв Specialist clinics: By appointment\n\n**ЁЯЧгя╕П Language Support:**\nтАв Malayalam translators available\nтАв Hindi-speaking staff at major hospitals\nтАв Use translation app if needed\n\n**ЁЯУ▒ Would you like directions to the nearest facility?**",
        default: "I'm Kerala's AI Health Assistant, specialized in local diseases and health guidance for migrant workers. I can help with:\n\nЁЯжЯ Vector-borne diseases (Dengue, Chikungunya, Malaria)\nЁЯМК Monsoon-related health risks\nЁЯН╜я╕П Food & water safety\nЁЯПе Healthcare navigation\nЁЯЪи Emergency guidance\n\nWhat specific health topic would you like to know about?"
      },
      ml: {
        default: "р┤Юр┤╛р╡╗ р┤Хр╡Зр┤░р┤│р┤др╡Нр┤др┤┐р┤▓р╡Ж AI р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤╛р┤гр╡Н, р┤кр╡Нр┤░р┤╛р┤жр╡Зр┤╢р┤┐р┤Х р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр┤│р┤┐р┤▓р╡Бр┤В р┤Хр╡Бр┤Яр┤┐р┤пр╡Зр┤▒р╡Нр┤▒ р┤др╡Кр┤┤р┤┐р┤▓р┤╛р┤│р┤┐р┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤др╡Нр┤др┤┐р┤▓р╡Бр┤В р┤╡р┤┐р┤╢р╡Зр┤╖р┤Ьр╡Нр┤Юр╡╗. р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р┤В:\n\nЁЯжЯ р┤╡р╡Жр┤Хр╡Нр┤▒р╡Нр┤▒р╡╝ р┤кр┤░р┤др╡Нр┤др╡Бр┤ир╡Нр┤и р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ (р┤бр╡Жр┤Щр╡Нр┤Хр╡Б, р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр╡╗р┤Чр╡Бр┤ир╡Нр┤п, р┤ор┤▓р╡Зр┤▒р┤┐р┤п)\nЁЯМК р┤ор╡║р┤╕р╡Вр╡║ р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤Ер┤кр┤Хр┤Яр┤Щр╡Нр┤Щр╡╛\nЁЯН╜я╕П р┤нр┤Хр╡Нр┤╖р┤г-р┤Ьр┤▓ р┤╕р╡Бр┤░р┤Хр╡Нр┤╖\nЁЯПе р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р╡Зр┤╡р┤и р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В\nЁЯЪи р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤░ р┤╕р┤╣р┤╛р┤пр┤В\n\nр┤Хр╡Гр┤др╡Нр┤пр┤ор┤╛р┤пр┤┐ р┤Пр┤др╡Н р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╡р┤┐р┤╖р┤пр┤др╡Нр┤др╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър┤╛р┤гр╡Н р┤Ер┤▒р┤┐р┤пр┤╛р╡╗ р┤╡р╡Зр┤гр╡Нр┤Яр┤др╡Н?"
      },
      hi: {
        default: "рдореИрдВ рдХреЗрд░рд▓ рдХрд╛ AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдБ, рд╕реНрдерд╛рдиреАрдп рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдФрд░ рдкреНрд░рд╡рд╛рд╕реА рд╢реНрд░рдорд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮред рдореИрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ:\n\nЁЯжЯ рд╡реЗрдХреНрдЯрд░ рдЬрдирд┐рдд рд░реЛрдЧ (рдбреЗрдВрдЧреВ, рдЪрд┐рдХрдирдЧреБрдирд┐рдпрд╛, рдорд▓реЗрд░рд┐рдпрд╛)\nЁЯМК рдорд╛рдирд╕реВрди рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬреЛрдЦрд┐рдо\nЁЯН╜я╕П рдЦрд╛рдирд╛-рдкрд╛рдиреА рдХреА рд╕реБрд░рдХреНрд╖рд╛\nЁЯПе рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди\nЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛\n\nрдЖрдк рдХрд┐рд╕ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
      },
      ta: {
        default: "роиро╛ройрпН роХрпЗро░ро│ро╛ро╡ро┐ройрпН AI роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпН, роЙро│рпНро│рпВро░рпН роирпЛропрпНроХро│рпН рооро▒рпНро▒рпБроорпН рокрпБро▓роорпНрокрпЖропро░рпНроирпНрод родрпКро┤ро┐ро▓ро╛ро│ро░рпНроХро│рпБроХрпНроХро╛рой роЪрпБроХро╛родро╛ро░ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓ро┐ро▓рпН роиро┐рокрпБрогро░рпН. роОройрпНройро╛ро▓рпН роЙродро╡ роорпБроЯро┐ропрпБроорпН:\n\nЁЯжЯ ро╡рпЖроХрпНроЯро░рпН рокро░ро╡рпБроорпН роирпЛропрпНроХро│рпН (роЯрпЖроЩрпНроХрпБ, роЪро┐роХрпНроХрпБройрпНроХрпБройро┐ропро╛, рооро▓рпЗро░ро┐ропро╛)\nЁЯМК рокро░рпБро╡рооро┤рпИ роЪрпБроХро╛родро╛ро░ роЕрокро╛ропроЩрпНроХро│рпН\nЁЯН╜я╕П роЙрогро╡рпБ-роирпАро░рпН рокро╛родрпБроХро╛рокрпНрокрпБ\nЁЯПе роЪрпБроХро╛родро╛ро░ роЪрпЗро╡рпИ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН\nЁЯЪи роЕро╡роЪро░ роЙродро╡ро┐\n\nроирпАроЩрпНроХро│рпН роОроирпНрод роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪрпБроХро╛родро╛ро░ родро▓рпИрокрпНрокрпИрокрпН рокро▒рпНро▒ро┐ роЕро▒ро┐роп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?"
      }
    };

    const langResponses = responses[lang as keyof typeof responses] || responses.en;

    // Enhanced disease detection with more keywords
    if (lowerMessage.includes('dengue') || lowerMessage.includes('р┤бр╡Жр┤Щр╡Нр┤Хр╡Б') || lowerMessage.includes('рдбреЗрдВрдЧреВ') || lowerMessage.includes('роЯрпЖроЩрпНроХрпБ')) {
      return langResponses.dengue || responses.en.dengue;
    } else if (lowerMessage.includes('chikungunya') || lowerMessage.includes('р┤Ър┤┐р┤Хр╡Нр┤Хр╡Бр╡╗р┤Чр╡Бр┤ир╡Нр┤п') || lowerMessage.includes('рдЪрд┐рдХрдирдЧреБрдирд┐рдпрд╛') || lowerMessage.includes('роЪро┐роХрпНроХрпБройрпНроХрпБройро┐ропро╛')) {
      return langResponses.chikungunya || responses.en.chikungunya;
    } else if (lowerMessage.includes('leptospirosis') || lowerMessage.includes('р┤▓р╡Жр┤кр╡Нр┤▒р╡Нр┤▒р╡Лр┤╕р╡Нр┤кр╡Ир┤▒р╡Лр┤╕р┤┐р┤╕р╡Н') || lowerMessage.includes('рд▓реЗрдкреНрдЯреЛрд╕реНрдкрд╛рдЗрд░реЛрд╕рд┐рд╕') || lowerMessage.includes('ро▓рпЖрокрпНроЯрпЛро╕рпНрокрпИро░рпЛроЪро┐ро╕рпН')) {
      return langResponses.leptospirosis || responses.en.leptospirosis;
    } else if (lowerMessage.includes('malaria') || lowerMessage.includes('р┤ор┤▓р╡Зр┤▒р┤┐р┤п') || lowerMessage.includes('рдорд▓реЗрд░рд┐рдпрд╛') || lowerMessage.includes('рооро▓рпЗро░ро┐ропро╛')) {
      return langResponses.malaria || responses.en.malaria;
    } else if (lowerMessage.includes('food') || lowerMessage.includes('р┤нр┤Хр╡Нр┤╖р┤гр┤В') || lowerMessage.includes('рдЦрд╛рдирд╛') || lowerMessage.includes('роЙрогро╡рпБ')) {
      return responses.en.foodsafety;
    } else if (lowerMessage.includes('water') || lowerMessage.includes('р┤╡р╡Жр┤│р╡Нр┤│р┤В') || lowerMessage.includes('рдкрд╛рдиреА') || lowerMessage.includes('роирпАро░рпН')) {
      return responses.en.waterborne;
    } else if (lowerMessage.includes('clinic') || lowerMessage.includes('hospital') || lowerMessage.includes('doctor')) {
      return responses.en.clinic;
    } else if (lowerMessage.includes('emergency') || lowerMessage.includes('urgent') || lowerMessage.includes('help')) {
      return responses.en.emergency;
    } else {
      return langResponses.default;
    }
  }

  const sendMessage = (): void => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate bot response delay with typing indicator
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: getBotResponse(inputMessage, language),
        sender: 'bot',
        timestamp: new Date(),
        suggestions: getKeralaDiseasePrompts(language).slice(0, 3),
        type: 'text'
      };
      
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 2000);
  };

  const scrollToBottom = (): void => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const handleSuggestionClick = (suggestion: string): void => {
    setInputMessage(suggestion);
  };

  const handleVoiceInput = (): void => {
    setIsListening(!isListening);
    // Mock voice input functionality
    if (!isListening) {
      setTimeout(() => {
        setInputMessage("What are the symptoms of dengue fever?");
        setIsListening(false);
      }, 2000);
    }
  };

  const copyToClipboard = (text: string): void => {
    navigator.clipboard.writeText(text);
  };

  const handleFeedback = (messageId: string, type: 'positive' | 'negative'): void => {
    // Mock feedback functionality
    console.log(`Feedback for message ${messageId}: ${type}`);
  };

  const categories = {
    diseases: { icon: Activity, label: 'Diseases', prompts: getKeralaDiseasePrompts(language).slice(0, 4) },
    tips: { icon: Heart, label: 'Health Tips', prompts: getHealthTips(language).slice(0, 4) },
    emergency: { icon: Shield, label: 'Emergency', prompts: ['Emergency contacts', 'Nearest hospital', 'Ambulance service', 'First aid guide'] }
  };

  const quickActions = [
    { icon: Phone, label: 'Emergency 108', action: () => window.open('tel:108'), color: 'text-red-600' },
    { icon: MapPin, label: 'Find Hospital', action: () => setInputMessage('nearest hospital'), color: 'text-blue-600' },
    { icon: FileText, label: 'Health Records', action: () => setInputMessage('health record access'), color: 'text-green-600' },
    { icon: Globe, label: 'Language Help', action: () => setInputMessage('language support'), color: 'text-purple-600' }
  ];

  return (
    <div className="h-full flex flex-col bg-gradient-to-br from-blue-50 to-white">
      {/* Enhanced Header */}
      <div className="kerala-dhs-header p-4 border-b flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="relative">
              <Bot className="w-8 h-8 text-white" />
              <div className={`absolute -top-1 -right-1 w-3 h-3 rounded-full border-2 border-white animate-pulse ${
                isOnline ? 'bg-green-400' : 'bg-orange-400'
              }`}></div>
            </div>
            <div className="text-white">
              <h2 className="font-semibold">Kerala AI Health Assistant</h2>
              <p className="text-xs opacity-90 flex items-center gap-2">
                {isOnline ? 'ЁЯЯв Online - Real-time responses' : 'ЁЯЯб Offline - Cached responses'}
                <Zap className="w-3 h-3" />
                <span>Advanced AI</span>
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={handleVoiceInput}
              className={`text-white hover:bg-blue-700 p-2 ${isListening ? 'bg-blue-700' : ''}`}
              title="Voice Input"
            >
              <Mic className={`w-4 h-4 ${isListening ? 'animate-pulse' : ''}`} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                setMessages([{
                  id: '1',
                  content: getWelcomeMessage(language),
                  sender: 'bot',
                  timestamp: new Date(),
                  suggestions: getKeralaDiseasePrompts(language).slice(0, 3),
                  type: 'text'
                }]);
                setShowPrompts(true);
              }}
              className="text-white hover:bg-blue-700 p-2"
              title="Reset Chat"
            >
              <RotateCcw className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Quick Actions Bar */}
      {showQuickActions && (
        <div className="bg-gradient-to-r from-red-50 to-blue-50 border-b p-3 flex-shrink-0">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center gap-2">
              <Zap className="w-4 h-4 text-red-600" />
              <span className="text-sm font-medium text-gray-700">Quick Emergency Actions</span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowQuickActions(false)}
              className="text-xs text-gray-500 p-1"
            >
              ├Ч
            </Button>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
            {quickActions.map((action, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                onClick={action.action}
                className="flex items-center gap-2 h-auto py-2 text-xs"
              >
                <action.icon className={`w-3 h-3 ${action.color}`} />
                <span>{action.label}</span>
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Quick Access Categories */}
      <div className="flex-shrink-0">
        {showPrompts && (
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-b p-4">
            <div className="flex items-center gap-2 mb-3">
              <Sparkles className="w-5 h-5 text-blue-600" />
              <h3 className="font-medium text-blue-800">Quick Health Assistant</h3>
            </div>
            
            <div className="grid grid-cols-3 gap-2 mb-4">
              {Object.entries(categories).map(([key, category]) => (
                <Button
                  key={key}
                  variant={activeCategory === key ? "default" : "outline"}
                  size="sm"
                  onClick={() => setActiveCategory(key)}
                  className={`flex items-center gap-2 ${activeCategory === key ? 'kerala-dhs-button-primary' : ''}`}
                >
                  <category.icon className="w-4 h-4" />
                  <span className="hidden sm:inline">{category.label}</span>
                </Button>
              ))}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-3">
              {categories[activeCategory as keyof typeof categories].prompts.map((prompt, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setInputMessage(prompt);
                    setShowPrompts(false);
                  }}
                  className="text-left justify-start h-auto py-2 px-3 text-xs kerala-dhs-nav-item-dropdown"
                >
                  {prompt}
                </Button>
              ))}
            </div>
            
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setShowPrompts(false)}
              className="text-xs text-blue-600"
            >
              <ChevronDown className="w-4 h-4 mr-1" />
              Hide suggestions
            </Button>
          </div>
        )}
      </div>
      
      {/* Messages Area with Proper Scrolling */}
      <div className="flex-1 min-h-0">
        <ScrollArea className="h-full" ref={scrollAreaRef}>
          <div className="p-4 space-y-6">
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-3 ${message.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                <Avatar className={`w-10 h-10 flex-shrink-0 ${message.sender === 'bot' ? 'kerala-dhs-accent' : ''}`}>
                  <AvatarFallback className={message.sender === 'bot' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100'}>
                    {message.sender === 'user' ? (
                      <User className="w-5 h-5" />
                    ) : (
                      <Bot className="w-5 h-5" />
                    )}
                  </AvatarFallback>
                </Avatar>
                
                <div className={`max-w-xs lg:max-w-lg ${message.sender === 'user' ? 'ml-auto' : ''}`}>
                  <div className={`p-4 rounded-lg shadow-sm ${
                    message.sender === 'user' 
                      ? 'kerala-dhs-button-primary text-white' 
                      : 'bg-white border border-gray-200'
                  }`}>
                    <div className="prose prose-sm max-w-none">
                      {message.content.split('\n').map((line, lineIndex) => (
                        <p key={lineIndex} className={`${lineIndex === 0 ? 'mt-0' : 'mt-2'} mb-1`}>
                          {line}
                        </p>
                      ))}
                    </div>
                    
                    {/* Message Actions for Bot Messages */}
                    {message.sender === 'bot' && (
                      <div className="flex items-center gap-2 mt-3 pt-2 border-t border-gray-100">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => copyToClipboard(message.content)}
                          className="text-xs p-1 h-auto"
                          title="Copy message"
                        >
                          <Copy className="w-3 h-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            const utterance = new SpeechSynthesisUtterance(message.content);
                            utterance.lang = language === 'ml' ? 'ml-IN' : language === 'hi' ? 'hi-IN' : language === 'ta' ? 'ta-IN' : 'en-US';
                            speechSynthesis.speak(utterance);
                          }}
                          className="text-xs p-1 h-auto"
                          title="Read aloud"
                        >
                          <Volume2 className="w-3 h-3" />
                        </Button>
                        <Separator orientation="vertical" className="h-4" />
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleFeedback(message.id, 'positive')}
                          className="text-xs p-1 h-auto text-green-600"
                          title="Helpful"
                        >
                          <ThumbsUp className="w-3 h-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleFeedback(message.id, 'negative')}
                          className="text-xs p-1 h-auto text-red-600"
                          title="Not helpful"
                        >
                          <ThumbsDown className="w-3 h-3" />
                        </Button>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex items-center gap-2 mt-2 text-xs text-gray-500">
                    <Clock className="w-3 h-3" />
                    <span>{message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                    {message.sender === 'bot' && isOnline && (
                      <Badge variant="outline" className="text-xs">
                        <Wifi className="w-3 h-3 mr-1" />
                        Live AI
                      </Badge>
                    )}
                    {message.sender === 'bot' && (
                      <Badge variant="outline" className="text-xs">
                        <Sparkles className="w-3 h-3 mr-1" />
                        Kerala Expert
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            ))}
            
            {/* Enhanced Suggestions */}
            {messages.length > 0 && messages[messages.length - 1].suggestions && (
              <div className="flex flex-wrap gap-2 px-2 mt-4">
                <div className="flex items-center gap-2 mb-2 w-full">
                  <Star className="w-4 h-4 text-blue-600" />
                  <span className="text-sm text-blue-600 font-medium">Suggested topics:</span>
                </div>
                {messages[messages.length - 1].suggestions?.map((suggestion, index) => (
                  <Badge
                    key={index}
                    variant="outline"
                    className="cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-colors py-1 px-3"
                    onClick={() => handleSuggestionClick(suggestion)}
                  >
                    {suggestion}
                  </Badge>
                ))}
              </div>
            )}
            
            {/* Enhanced Typing Indicator */}
            {isTyping && (
              <div className="flex gap-3">
                <Avatar className="w-10 h-10 flex-shrink-0">
                  <AvatarFallback className="bg-blue-100 text-blue-700">
                    <Bot className="w-5 h-5" />
                  </AvatarFallback>
                </Avatar>
                <div className="bg-white border border-gray-200 p-4 rounded-lg shadow-sm">
                  <div className="flex items-center gap-2">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                    <span className="text-xs text-gray-500">AI is analyzing your query...</span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          <ScrollBar orientation="vertical" />
        </ScrollArea>
      </div>
        
      {/* Enhanced Input Area */}
      <div className="border-t bg-white p-4 flex-shrink-0">
        {!showPrompts && (
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => setShowPrompts(true)}
            className="mb-3 text-xs kerala-dhs-accent flex items-center gap-2"
          >
            <Sparkles className="w-4 h-4" />
            Show health suggestions
          </Button>
        )}
        
        <div className="flex gap-2">
          <div className="relative flex-1">
            <Input
              placeholder="Ask about symptoms, diseases, prevention, or emergency help..."
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
              className="kerala-dhs-input pr-12"
            />
            <Button
              variant="ghost"
              size="sm"
              onClick={handleVoiceInput}
              className={`absolute right-1 top-1/2 transform -translate-y-1/2 p-2 ${isListening ? 'text-red-500 animate-pulse' : 'text-gray-400'}`}
              title={isListening ? "Stop listening" : "Voice Input"}
            >
              <Mic className="w-4 h-4" />
            </Button>
          </div>
          
          <Button 
            onClick={sendMessage} 
            size="sm" 
            className="kerala-dhs-button-primary px-4"
            disabled={!inputMessage.trim() || isTyping}
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
        
        <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
          <div className="flex items-center gap-2">
            <span>ЁЯТб Ask about Kerala-specific health concerns</span>
            {isListening && (
              <Badge variant="outline" className="text-xs animate-pulse">
                <Mic className="w-3 h-3 mr-1" />
                Listening...
              </Badge>
            )}
          </div>
          <div className="flex items-center gap-1">
            <span>Status:</span>
            {isOnline ? (
              <span className="text-green-600 flex items-center gap-1">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                AI Online
              </span>
            ) : (
              <span className="text-orange-600 flex items-center gap-1">
                <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                Offline
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}